using FootballPlayersAPI.Data;
using FootballPlayersAPI.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using System.Text.Json;

namespace FootballPlayersAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PlayersController : ControllerBase
    {
        private readonly DBData _dbData;
        public PlayersController(DBData dbData)
        {
            _dbData = dbData;
        }


        [HttpGet]

        public IActionResult getAllPlayers()
        {
            List<FootballPlayer> playersList = _dbData.GetAllPlayers();
            if(playersList.Count < 1)
            {
                ExecuteETL();
            }
           
            return StatusCode(StatusCodes.Status200OK, playersList);
        }

        [HttpGet("page/{pageNumber}")]

        public IActionResult getPlayersByPage(int pageNumber)
        {
            List<FootballPlayer> playersList = _dbData.GetPlayersByPage(pageNumber);
            if (playersList.Count < 1)
            {
                ExecuteETL();
            }

            return StatusCode(StatusCodes.Status200OK, playersList);
        }

        [HttpGet("{playerID}")]

        public IActionResult GetPlayer(int playerID)
        {
            FootballPlayer player = _dbData.GetPlayer(playerID);
            if (player == null)
            {
                return StatusCode(StatusCodes.Status404NotFound, null);
            }

            return StatusCode(StatusCodes.Status200OK, player);
        }




        [HttpGet("name/{name}")]

        public IActionResult filterByName(string name)
        {
            List<FootballPlayer> list = _dbData.FilterByName(name);
            return StatusCode(StatusCodes.Status200OK, list);
        }


        [HttpGet("nation/{nation}")]

        public IActionResult FilterByNationality(string nation)
        {
            List<FootballPlayer> list = _dbData.FilterByNationality(nation);
            return StatusCode(StatusCodes.Status200OK, list);
        }



        [HttpGet("overall/{overall}")]

        public IActionResult FilterByOverall(int overall)
        {
            List<FootballPlayer> list = _dbData.FilterByOverall(overall);
            return StatusCode(StatusCodes.Status200OK, list);
        }

        [HttpGet("club/{club}")]

        public IActionResult FilterByClub(string club)
        {
            List<FootballPlayer> list = _dbData.FilterByClub(club);
            return StatusCode(StatusCodes.Status200OK, list);
        }




        private void ExecuteETL()
        {
            // Execute a Pandas script to perform the ETL process and save it as a JSON file
            ExecutePandasScript();

            //path to the cleaned JSON generated by the python script
            string filePath = Path.Combine("Data", "players_cleaned.json");
            string json = System.IO.File.ReadAllText(filePath);

            //Deserialize json into a list of FootballPlayer objects
            List<FootballPlayer> playersList = JsonSerializer.Deserialize<List<FootballPlayer>>(json);

            _dbData.ResetIdentity();
            _dbData.InsertPlayers(playersList);
        }


        private void ExecutePandasScript()
        {
            //configure the process to run the Python ETL script
            var psi = new ProcessStartInfo
            {
                FileName = "python",
                Arguments = "etl.py",
                RedirectStandardOutput = true, //to capture output if needed
                RedirectStandardError = true,//to capture errors if needed
                UseShellExecute = false,
                CreateNoWindow = true,
                WorkingDirectory = Path.Combine(Directory.GetCurrentDirectory(), "Data")
            };
            //start process
            using var process = Process.Start(psi);
            process.WaitForExit();
        }
    }
}
